; libscheme glossary ---------------------------------------------------


;; booleans ------------------------------------------------------------
#t
#f
not
boolean?
eq?
eqv?
equal?


;; characters ----------------------------------------------------------
<char>
char?
char=?
char<?
char>?
char<=?
char>=?
char-ci=?
char-ci<?
char-ci>?
char-ci<=?
char-ci>=?
char-alphabetic?
char-numeric?
char-whitespace?
char-upper-case?
char-lower-case?
char->integer
integer->char
char-upcase
char-downcase


;; control flow --------------------------------------------------------
error
eval
<primitive>
<closure>
<continuation>
procedure?
apply
map
for-each
call-with-current-continuation
call/cc


;; lists ---------------------------------------------------------------
<empty-list>
<pair>
pair?
cons
car
cdr
set-car!
set-cdr!
null?
list?
list
length
append
reverse
list-tail
list-ref
memq
memv
member
assq
assv
assoc
caar
cadr
cdar
cddr
caaar
caadr
cadar
cdaar
cdadr
cddar
caddr
cdddr


;; numbers -------------------------------------------------------------
<integer>
<double>
number?
complex?
real?
rational?
integer?
exact?
inexact?
=
<
>
<=
>=
zero?
positive?
negative?
odd?
even?
max
min
+
-
*
/
abs
quotient
remainder
modulo
gcd
lcm
floor
ceiling
truncate
round
exp
log
sin
cos
asin
cos
atan
sqrt
expt
exact->inexact
inexact->exact
number->string
string->number


;; input/output --------------------------------------------------------
<eof>
<input-port>
<output-port>
call-with-input-file
call-with-output-file
input-port?
output-port?
current-input-port
current-output-port
with-input-from-file
with-output-to-file
open-input-file
open-output-file
close-input-port
close-output-port
read
read-char
peek-char
eof-object?
char-ready?
write
display
newline
write-char
load
flush-output


;; promises ------------------------------------------------------------
<promise>
force


;; strings -------------------------------------------------------------
<string>
string?
make-string
string
string-length
string-ref
string-set!
string=?
string-ci=?
string<?
string>?
string<=?
string>=?
string-ci<?
string-ci>?
string-ci<=?
string-ci>=?
substring
string-append
string->list
list->string
string-copy
string-fill!


;; extensions ----------------------------------------------------------
(defmacro NAME (ARG1 ARG2 ...) BODY)
(define-struct NAME (FIELD1 FIELD2 ...))
	(make-NAME init1 init2 ...)		; constructor
	(NAME? obj)				; predicate
	(NAME-FIELD1 instance)			; getter
	(set-NAME-FIELD1 instance val)		; setter
(exit [INTEGER])
(open-input-string STRING)
(with-input-from-string STRING THUNK)
(write-to-string OBJECT)			; machine readable
(display-to-string OBJECT)			; human readable


;; symbols -------------------------------------------------------------
<symbol>
symbol?
string->symbol
symbol->string


;; control flow --------------------------------------------------------
<syntax>
<macro>
lambda
define
quote
if
set!
cond
case
and
or
let
let*
letrec
begin
do
delay
quasiquote


SCHEME_STR_VAL(var),
SCHEME_STR_VAL
<type>


;; vectors -------------------------------------------------------------
<vector>
vector?
make-vector
vector
vector-length
vector-ref
vector-set!
vector->list
list->vector
vector-fill!
vector-append
